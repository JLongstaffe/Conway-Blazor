
@using System.Timers

@using Conway.Core

<table>
    <tbody>
        @for (var row = 0; row < Grid.GetLength(0); row++)
        {
            <tr>
                @for (var column = 0; column < Grid.GetLength(1); column++)
                {
                    var (x, y) = (row, column);

                    <td class=@(Grid[x, y] ? "alive" : "")
                        @onclick="() => OnCellClick(y, x)"></td>
                }
            </tr>
        }
    </tbody>
</table>

<button @onclick="@NextState">Next</button>

<button @onclick="@OnPlayClick">@(playing ? "Pause" : "Play")</button>

@code
{
    [Parameter]
    public bool[,] InitialGrid { get; set; }

    [Parameter]
    public int UpdateFrequency { get; set; }

    protected override void OnInitialized()
    {
        Grid = InitialGrid;

        ConwayPerformance = new ConwayPerformance(Grid.Length, Grid.Length);

        timer = new Timer(UpdateFrequency);

        timer.Elapsed += OnTimerElapsed;

        timer.AutoReset = false;

        timer.Enabled = false;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (playing) timer.Start();

        base.OnAfterRender(firstRender);
    }

    private void OnCellClick(int row, int column) =>
        Grid[row, column] = !Grid[row, column];

    private void OnPlayClick() => playing = !playing;

    private async void OnTimerElapsed(object sender, EventArgs args)
    {
        await InvokeAsync(() =>
        {
            NextState();

            StateHasChanged();
        });
    }

    private void NextState() => ConwayPerformance.NextState(Grid);

    private bool[,] Grid { get; set; }

    private bool playing = false;

    private ConwayPerformance ConwayPerformance;

    private Timer timer;
}
